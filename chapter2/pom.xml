<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.leiyuxin.smart4j</groupId>
	<artifactId>chapter2</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<!-- 必须使用war 因为要打包成war在服务器运行 -->
	<packaging>war</packaging>
	<name>chapter2</name>
	<url>http://maven.apache.org</url>
	<properties>
		<!--统一源代码的编码方式，否则使用Maven 编译源代码的时候就会出现相关的警告 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<!-- Servlet 只是参与编译不参与打包所以范围设置为scope -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<!-- JSP 只是参与编译不参与打包所以范围设置为provided -->
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.2</version>
			<scope>provided</scope>
		</dependency>
		<!-- JSTL 只是参与运行，不参与编译所以范围设置为runtime -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<scope>runtime</scope>
		</dependency>
		<!-- JUnit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<!-- SLF4J 使用SLF4J依赖，用于提供日志API,使用Log4J作为实现 使用的是门面模式 为了让 Log4J 起作用，必须在main/resources目录下创建一个名为log4j.properties的文件
			即使没有加载log4j的jar 也自动下载, -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.7</version>
		</dependency>
		<!-- MySQL 提供MYSQL依赖，用于提供JDBC实现 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.33</version>
			<scope>runtime</scope>
		</dependency>
		<!--添加Apache Commons依赖，用于提供常用的工具类如字符串是否为空 -->
		<!-- Apache Commons Lang 针对基本类型的 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency>
		<!-- Apache Commons Collections 针对集合的 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.0</version>
		</dependency>
		<!-- Apache Commons DbUtils 执行一条select 语句需要编写一大堆代码，而且必须是try...catch...finally结构
			开发效率不高 Apache Commons DBUtils 就是来解决这个问题 -->
		<dependency>
			<groupId>commons-dbutils</groupId>
			<artifactId>commons-dbutils</artifactId>
			<version>1.6</version>
		</dependency>
		<!-- Apache DBCP 数据库操作完成后还需要调用CloseConnection方法关闭数据库连接，数据库连接数是有限的，因此将考虑一种解决方案，将数据库连接进行池化，也就是说我们需要弄一个数据库连接池
		Apache DBCP是最好的数据库连接池之一-->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
			<version>2.0.1</version>
		</dependency>


	</dependencies>

	<build>
	<!-- 这个名字有争议	<finalName>chapter3</finalName> -->
		<plugins>
			<!--Compile JDK版本统一源代码与编译输出的jdk版本，首先eclipse装了对应的JDK版本才行不然会出现警告在Problem标签页里面 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<encoding>UTF-8</encoding>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>

			<!-- Test在使用maven打包的时候跳过单元测试 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
			<!-- Tomcat 在命令提示符下启动 :mvn tomcat7:run -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<path>/${project.artifactId}</path>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
